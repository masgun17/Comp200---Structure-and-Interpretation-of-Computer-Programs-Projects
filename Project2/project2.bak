#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 4547 0 17 3 50
#";;; masgun17@ku.edu.tr    Fri Nov  2 15:55:11 2018"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;; Comp200 Project 2    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;; Before you start:    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;; * Please read the detailed instructions for this project from th"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 54 #";;; file project2.pdf available on the course website."
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;; * Please read \"Instructions\" carefully and make"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;; sure you understand everything before you start working on your"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;; project in order to avoid problems."
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";;; "
0 0 17 3 26 #"While you are working:    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;; * Type all your work and notes in the appropriate sections of th"
 #"is file."
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";;; * Please do not delete any of the existing lines."
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; * Use the procedure names given in the instructions."
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;; * Remember to frequently save your file."
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;; * Use semicolon (;) to comment out text, tests and unused code."
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;; * Remember to document your code."
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;; * Remember our collaboration policy: you can discuss with your f"
 #"riends but"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;;   *** NOTHING WRITTEN GETS EXCHANGED ***"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;; When you are done:    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;; * Perform a final save and check-in."
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;; * Please do not make any modifications after midnight on the due"
 #" date."
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;; * Please send an email comp200@ku.edu.tr if you have any questio"
 #"ns."
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; * Make sure your file loads and runs without errors."
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";;;   *** IF (load \"project2.scm\") GIVES ERRORS OR WE CANNOT RUN Y"
 #"OUR PROJECT, IT WILL NOT BE GRADED ***"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #";;;    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;; DO NOT CHANGE FOLLOWING LINES, THEY ARE NECESSARY FOR THE WHOLE "
 #"PROJECT."
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";;; WHILE SOLVING PROBLEMS YOU CAN USE THE PROCEDURES DEFINED HERE, "
 #"IT WILL EASE YOUR WORK."
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 28 3 12 #"#lang racket"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 13 #"math/bigfloat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; Ignore the following. This is necessary so the file loads without "
 #"errors initially:"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; make-play will make a list then given two strings"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; e.g. (make-play \"c\" \"c\") => (\"c\" \"c\")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; The empty history when noone    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; has started to played yet    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"())    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; extend-history adds the new element"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; to the history when someone plays"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"extend-history"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; empty-history? is a procedure that"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; returns boolean true if the history is empty"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"empty-history?"
0 0 24 3 1 #" "
0 0 14 3 5 #"null?"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; History of players is kept in a list."
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; The last action is found by most-recent-play procedure."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"most-recent-play"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; All the actions except the most recent"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; one are found with rest-of-plays procedure."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"rest-of-plays"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; The play-loop procedure takes as its  arguments two prisoner's"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; dilemma strategies, and plays an iterated game of approximately"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; one hundred rounds.  A strategy is a procedure that takes"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; two arguments: a history of the player's previous plays and"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; a history of the other player's previous plays.  The procedure"
0 0 24 29 1 #"\n"
0 0 17 3 57
#"; returns either a \"c\" for cooperate or a \"d\" for defect."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"play-loop"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"play-loop-iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 3 #") ("
0 0 14 3 17 #"print-out-results"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"result0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 7 #"result1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"play-loop-iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 14 #"extend-history"
0 0 24 3 1 #" "
0 0 14 3 7 #"result0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 14 #"extend-history"
0 0 24 3 1 #" "
0 0 14 3 7 #"result1"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 5 #"limit"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"play-loop-iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; The following procedures are used to compute and print"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; out the players' scores at the end of an iterated game"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"print-out-results"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #" "
0 0 14 3 15 #"number-of-games"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"scores"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-scores"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Player 1 Score:  \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"scores"
0 0 24 3 2 #") "
0 0 14 3 15 #"number-of-games"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Player 2 Score:  \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"scores"
0 0 24 3 2 #") "
0 0 14 3 15 #"number-of-games"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 24 3 7 #")))    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-scores"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-scores-helper"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #" "
0 0 14 3 6 #"score0"
0 0 24 3 1 #" "
0 0 14 3 6 #"score1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 14 #"empty-history?"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"score0"
0 0 24 3 1 #" "
0 0 14 3 6 #"score1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"game"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 2 #" ("
0 0 14 3 16 #"most-recent-play"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 16 #"most-recent-play"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 17 #"get-scores-helper"
0 0 24 3 2 #" ("
0 0 14 3 13 #"rest-of-plays"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 13 #"rest-of-plays"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-player-points"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 2 #") "
0 0 14 3 6 #"score0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-player-points"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 2 #") "
0 0 14 3 6 #"score1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"get-scores-helper"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-player-points"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-point-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#";; format is that first sublist identifies the players' choices"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 69
(
 #";; with \"c\" for cooperate and \"d\" for defect; and that second su"
 #"blist"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 35 #";; specifies payout for each player"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #") ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 6 #"))    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #") ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 6 #"))    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #") ("
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 6 #"))    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #") ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 8 #"))))    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; Note that you will need to write extract-entry in Problem 1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-point-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 13 #"extract-entry"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; A sampler of strategies    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"NASTY"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 3 #"\"d\""
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"PATSY"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 3 #"\"c\""
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"SPASTIC"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 3 #"\"c\""
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 3 #"\"d\""
0 0 24 3 6 #"))    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"EGALITARIAN"
0 0 24 3 2 #"  "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"count-instances-of"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"hist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 14 #"empty-history?"
0 0 24 3 1 #" "
0 0 14 3 4 #"hist"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"most-recent-play"
0 0 24 3 1 #" "
0 0 14 3 4 #"hist"
0 0 24 3 2 #") "
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 18 #"count-instances-of"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"rest-of-plays"
0 0 24 3 1 #" "
0 0 14 3 4 #"hist"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 18 #"count-instances-of"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"rest-of-plays"
0 0 24 3 1 #" "
0 0 14 3 4 #"hist"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"ds"
0 0 24 3 2 #" ("
0 0 14 3 18 #"count-instances-of"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"cs"
0 0 24 3 2 #" ("
0 0 14 3 18 #"count-instances-of"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 2 #"ds"
0 0 24 3 1 #" "
0 0 14 3 2 #"cs"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 7 #")))    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"EYE-FOR-EYE"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-history?"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 3 #"\"c\""
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"most-recent-play"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;; DO NOT CHANGE THE ABOVE LINES, THEY ARE NECESSARY FOR THE WHOLE "
 #"PROJECT."
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";;; WHILE SOLVING PROBLEMS YOU CAN USE THE PROCEDURES DEFINED HERE, "
 #"IT WILL EASE YOUR WORK."
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #":;;:::;;:;::;:;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; Problem 1    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Description for extract-entry: (before the definition of each proc"
 #"edure,"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#"; please write a description about what the procedure does and what"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; its input and output should be, making sure the lines are commente"
 #"d"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #"; out with semi-colons)    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; HINT: You can make use of list-ref"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; (list-ref *game-association-list* 0) ==> ((\"c\" \"c\") (3 3))"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; (list-ref *game-association-list* 1) ==> ((\"c\" \"d\") (0 5))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; extract-entry takes two inputs, first one is the play which repres"
 #"ents the datas in the"
) 0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; list form. Second one is *game-association-list*, which is defined"
 #" above. This procedure"
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #"; evaluates the first input, play, and then returns the correct list"
 #" from *game-association-list*. "
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"extract-entry"
0 0 24 3 1 #" "
0 0 14 3 4 #"play"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"play"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #"))) ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"play"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #"))) ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"play"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #"))) ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"play"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #"))) ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"        ))    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; Test cases for extract-entry: (When you write your procedure you c"
 #"an"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; test it with the below test cases. Initially it returns #f since"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; your-answer-here is defined as #f. But when you complete the proce"
 #"dure"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; It should return the correct answers below.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"--------Problem 1--------\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-play"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"extract-entry"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-play"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 2 #") "
0 0 17 3 30 #"; ANSWER => '((\"c\" \"c\") (3 3))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"a2-play"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"extract-entry"
0 0 24 3 1 #" "
0 0 14 3 7 #"a2-play"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 2 #") "
0 0 17 3 30 #"; ANSWER => '((\"c\" \"d\") (0 5))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"a3-play"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"extract-entry"
0 0 24 3 1 #" "
0 0 14 3 7 #"a3-play"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 2 #") "
0 0 17 3 30 #"; ANSWER => '((\"d\" \"c\") (5 0))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"a4-play"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"extract-entry"
0 0 24 3 1 #" "
0 0 14 3 7 #"a4-play"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 2 #") "
0 0 17 3 30 #"; ANSWER => '((\"d\" \"d\") (1 1))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"a5-play"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"extract-entry"
0 0 24 3 1 #" "
0 0 14 3 7 #"a5-play"
0 0 24 3 1 #" "
0 0 14 3 23 #"*game-association-list*"
0 0 24 3 2 #") "
0 0 17 3 15 #"; ANSWER => '()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"-----End of Problem 1-----\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";'((\"c\" \"c\") (3 3))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";'((\"c\" \"d\") (0 5))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";'((\"d\" \"c\") (5 0))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";'((\"d\" \"d\") (1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Nothing is printed here."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #":;;:::;;:;::;:;:"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; Problem 2    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; Use play-loop to play games among the five defined strategies"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Create a matrix in which you show the average score for"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; tournaments pitting all possible pairings of the five"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; different strategies: Nasty, Patsy, Eye-for-Eye, Spastic, Egalitar"
 #"ian."
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Describe the behavior you observe for the different strategies."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; SPASTIC - EGALITARIAN -> There is not a dominant one, each trial t"
 #"he winner can change,"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; one can be defeated badly in one trial but then it can beat the ot"
 #"her one by far."
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; SPASTIC - EYE-FOR-EYE -> Always equal, at least for my trials ( ap"
 #"proximately 10 trials)."
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; EGALITARIAN - SPASTIC -> Not certain winner, maight change each tr"
 #"ial."
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#"; EYE-FOR-EYE - SPASTIC -> Some trials, they get same averages."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; To test the strategies against each other => e.g. (play-loop NASTY"
 #" PATSY)"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #"; Fill in the ? part in below matrices when you get the result from "
 #"play-loop procedure."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #"; Strategy2 =>      NASTY       ||       PATSY       ||             "
 #"   SPASTIC                  ||               EGALITARIAN            "
 #"  ||              EYE-FOR-EYE                ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #"; Strategy1 | Player1 | Player2 || Player1 | Player2 ||       Player"
 #"1     |         Player2     ||      Player1      |      Player2     "
 #"  ||      Player1       |       Player2      ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #";           | points  | points  || points  | points  ||       points"
 #"      |         points      ||      points       |      points      "
 #"  ||      points        |       points       ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #";  NASTY    |   1.0   |   1.0   ||   5.0   |   0     || 3.0560747663"
 #"5514  | 0.48598130841121495 || 1.0363636363636364|  0.99090909090909"
 #"1 || 1.0404040404040404 | 0.9895833333333334 ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #"; Strategy2 =>      NASTY       ||       PATSY       ||             "
 #"   SPASTIC                  ||               EGALITARIAN            "
 #"  ||              EYE-FOR-EYE                ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #"; Strategy1 | Player1 | Player2 || Player1 | Player2 ||       Player"
 #"1     |         Player2     ||      Player1      |      Player2     "
 #"  ||      Player1       |       Player2      ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #";           | points  | points  || points  | points  ||       points"
 #"      |         points      ||      points       |      points      "
 #"  ||      points        |       points       ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #";  PATSY    |   0     |   5.0   ||   3.0   |   3.0   || 1.6698113207"
 #"54717 |  3.8867924528301887 ||        3.0        |        3.0       "
 #"  ||       3.0          |        3.0         ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 226
(
 #"; Strategy2 =>                 NASTY                 ||             "
 #"     PATSY                  ||                SPASTIC               "
 #"   ||               EGALITARIAN              ||              EYE-FOR"
 #"-EYE                ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 227
(
 #"; Strategy1 |      Player1       |       Player2     ||      Player1"
 #"       |       Player2      ||       Player1      |         Player2 "
 #"    ||      Player1      |      Player2       ||      Player1       "
 #"|       Player2      ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 227
(
 #";           |      points        |       points      ||      points "
 #"       |       points       ||       points       |         points  "
 #"    ||      points       |      points        ||      points        "
 #"|       points       ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 227
(
 #";  SPASTIC  | 0.5094339622641509 | 2.9622641509433962|| 3.9622641509"
 #"433962 | 1.5566037735849056 ||  2.323809523809524 | 2.13333333333333"
 #"33  || 3.233009708737864 | 2.0679611650485437 || 2.3404255319148937 "
 #"| 2.3404255319148937 ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 228
(
 #"; Strategy2 =>                 NASTY                  ||            "
 #"      PATSY                  ||                SPASTIC              "
 #"     ||               EGALITARIAN              ||              EYE-F"
 #"OR-EYE                ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 228
(
 #"; Strategy1  |      Player1       |       Player2     ||      Player"
 #"1       |       Player2      ||       Player1      |         Player2"
 #"     ||      Player1      |      Player2       ||      Player1      "
 #" |       Player2      ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 228
(
 #";            |      points        |       points      ||      points"
 #"        |       points       ||       points       |         points "
 #"     ||      points       |      points        ||      points       "
 #" |       points       ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 228
(
 #"; EGALITARIAN| 0.9893617021276596 | 1.0425531914893618||       3.0  "
 #"        |        3.0         || 1.8431372549019607 | 3.3627450980392"
 #"157  ||       3.0         |       3.0          ||        3.0        "
 #" |       3.0          ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 228
(
 #";  Strategy2 =>                 NASTY                 ||            "
 #"      PATSY                  ||                SPASTIC              "
 #"     ||               EGALITARIAN              ||              EYE-F"
 #"OR-EYE                ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 228
(
 #"; Strategy1  |      Player1       |       Player2     ||      Player"
 #"1       |       Player2      ||       Player1      |         Player2"
 #"     ||      Player1      |      Player2       ||      Player1      "
 #" |       Player2      ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 228
(
 #";            |      points        |       points      ||      points"
 #"        |       points       ||       points       |         points "
 #"     ||      points       |      points        ||      points       "
 #" |       points       ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 228
(
 #"; EYE-FOR-EYE| 0.9904761904761905 | 1.0380952380952382||       3.0  "
 #"        |        3.0         || 2.1941747572815533 | 2.2427184466019"
 #"416  ||       3.0         |       3.0          ||        3.0        "
 #" |       3.0          ||"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #":;;:::;;:;::;::;"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; Problem 3    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Games involving Egalitarian tend to be slower than other games."
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; Why is that so? Use order-of-growth notation to explain your answe"
 #"r."
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; It calls itself on \"else\" part repeatedly, so for any given n, i"
 #"t repeats itself n times."
) 0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; And it repeats this for both c and d. So it takes 2n steps, which "
 #"can be represented as"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #"; R(n), linear."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Alyssa P. Hacker, upon seeing the code for Egalitarian,"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; suggested the following iterative version of the procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";(define (Egalitarian my-history other-history)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";  (define (majority-loop cs ds hist)"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";    (cond ((empty-history?"
 #" hist) (if (> ds cs"
 #") \342\200\234d\342\200\235 \342\200\234c\342\200\235))"
) 0 0 24 29 1 #"\n"
0 0 17 3 54
(
 #";          ((string=? (mos"
 #"t-recent-play hist) \342\200\234c\342\200\235)"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";           (majority-loop (+ 1 cs) ds (rest-of-plays hist)))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";          (else    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";           (majority-loop cs (+ 1 ds) (rest-of-plays hist)))))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";  (majority-loop 0 0 other-history))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; Compare this procedure with the original version."
0 0 24 29 1 #"\n"
0 0 17 3 102
(
 #"; - In first procedure for every string value in the other-history i"
 #"t checks firstly, whether is it c "
) 0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #"; or not. If it is c, it adds 1 to cs. Then similarly it checks it f"
 #"or d. If it is d, it add 1 to ds."
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; At last it compares the numbers cs and ds and then returns the max"
 #" of c and d."
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #"; In second procedure it checks whether the first item in hist is c "
 #"or d and then add it"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; cs or ds respectively. When hist becomes empty, it returns the max"
 #" of cs or ds."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; Do the orders of growth (in time) for the two procedures differ?"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #"; - However, the second procedure only takes n steps, still its orde"
 #"r of growth is R(n), same as"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #"; first procedure."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Is the newer version faster?    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; ANSWER:  Yes.  "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #":;;:::;;:;::;:::"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; Problem 4    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Write a new strategy eye-for-two-eyes"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 14 #"empty-history?"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 14 #"empty-history?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"rest-of-plays"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"most-recent-play"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"most-recent-play"
0 0 24 3 2 #" ("
0 0 14 3 13 #"rest-of-plays"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\"d\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 6 #")))   "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Test cases for EYE-FOR-TWO-EYES: (When you write your procedure yo"
 #"u can"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; test it with the below test cases. Initially it returns #f since"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; your-answer-here is defined as #f. But when you complete the proce"
 #"dure"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; It should return the correct answers below.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"--------Problem 4--------\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Strategy depends only to the other-history, so dont case my-histor"
 #"y"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #") "
0 0 17 3 15 #"; ANSWER => \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")) "
0 0 17 3 14 #"; ANSWER => c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"EYE-FOR-TWO-EYES"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"-----End of Problem 4-----\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"c\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"c\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"c\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"c\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"c\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"c\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"d\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"c\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"d\""
0 0 24 29 1 #"\n"
0 0 17 3 4 #";\"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #":;;:::;;:;:::;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; Problem 5    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; Write a procedure make-eye-for-n-eyes."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-eye-for-n-eyes"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 73
(
 #"; You need to return a two-argument (my-history other-history) proce"
 #"dure."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 3 #"\"d\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"most-recent-play"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"c\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"most-recent-play"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 2 #" ("
0 0 14 3 13 #"rest-of-plays"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 5 #")) (("
0 0 14 3 19 #"make-eye-for-n-eyes"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                    "
0 0 19 3 3 #"\"d\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Test cases for make-eye-for-n-eyes: (When you write your procedure"
 #" you can"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; test it with the below test cases. Initially it returns #f since"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; your-answer-here is defined as #f. But when you complete the proce"
 #"dure"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; It should return the correct answers below.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"--------Problem 5--------\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"one-eye"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-eye-for-n-eyes"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 17 3 27 #"; equivalent to EYE-FOR-EYE"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"two-eye"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-eye-for-n-eyes"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 17 3 31 #"; equivalent to EYE-FOR-TWO-EYE"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Similar to one-eye and two-eye."
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Defects only if three recent plays in the history1 is \"d\""
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Cooperates if any of the three recent plays in hsitory1 is \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"three-eye"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-eye-for-n-eyes"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Strategy depends only to the other-history, so dont case my-histor"
 #"y"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Testing (make-eye-for-n-eyes 1)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"one-eye"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"one-eye"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"d\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Testing (make-eye-for-n-eyes 2)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"two-eye"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"two-eye"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"d\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Testing (make-eye-for-n-eyes 3)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"three-eye"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"three-eye"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 3 #")) "
0 0 17 3 15 #"; ANSWER => \"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"-----End of Problem 5-----\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #":;;:::;;:;:::;;:"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; Problem 6    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Write a procedure make-rotating-strategy"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 9         895 21           0 0           0 148 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"make-rotating-strategy"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq0"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq1"
0 0 24 3 1 #")"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"x-helper"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"y-helper"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq0"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 3 #") ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"freq1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"freq0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 3 #") ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"freq1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 6 #"))))))"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"make-rotating-strategy"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq0"
0 0 24 3 1 #" "
0 0 14 3 5 #"freq1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"    )    "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; Test cases for make-rotating-strategy: (When you write your proced"
 #"ure you can"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; test it with the below test cases. Initially it returns #f since"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; your-answer-here is defined as #f. But when you complete the proce"
 #"dure"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; It should return the correct answers below.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 15 #"--------Problem"
0 0 19 3 10 #" 6--------"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-1"
0 0 24 3 2 #" ("
0 0 14 3 22 #"make-rotating-strategy"
0 0 24 3 1 #" "
0 0 14 3 5 #"NASTY"
0 0 24 3 1 #" "
0 0 14 3 5 #"PATSY"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; 1 times NASTY 1 times PATSY    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 2 #"rt"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"rt"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"rt"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"      )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 2 #" ("
0 0 19 3 22 #"make-rotating-strategy"
0 0 19 3 1 #" "
0 0 19 3 5 #"NASTY"
0 0 19 3 1 #" "
0 0 19 3 5 #"PATSY"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 1 #" "
0 0 19 3 2 #"1)"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-1"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-1"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-1"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-1"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-2"
0 0 24 3 2 #" ("
0 0 14 3 22 #"make-rotating-strategy"
0 0 24 3 1 #" "
0 0 14 3 5 #"NASTY"
0 0 24 3 1 #" "
0 0 14 3 5 #"PATSY"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; 2 times NASTY 2 times PATSY    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 2 #" ("
0 0 19 3 22 #"make-rotating-strategy"
0 0 19 3 1 #" "
0 0 19 3 5 #"NASTY"
0 0 19 3 1 #" "
0 0 19 3 5 #"PATSY"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 2 #"2)"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-2"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-2"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-2"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-2"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-2"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-2"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-2"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 10 #"rotating-2"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 8 #"-----End"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Problem"
0 0 19 3 7 #" 6-----"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #"::;::;;;;;::;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; Problem 7    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; Write a new strategy, make-higher-order-spastic, which takes a lis"
 #"t of strategies as input."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #" "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"make-higher-order-spastic"
0 0 24 3 1 #" "
0 0 14 3 10 #"strategies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; Test cases for make-higher-order-spastic: (When you write your pro"
 #"cedure you can"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; test it with the below test cases. Initially it returns #f since"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; your-answer-here is defined as #f. But when you complete the proce"
 #"dure"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; It should return the correct answers below.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 15 #"--------Problem"
0 0 19 3 10 #" 7--------"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"NASTY-PATSY"
0 0 24 3 2 #" ("
0 0 14 3 25 #"make-higher-order-spastic"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"NASTY"
0 0 24 3 1 #" "
0 0 14 3 5 #"PATSY"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 12 #" NASTY-PASTY"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 11 #"NASTY-PATSY"
0 0 24 3 2 #") "
0 0 17 3 14 #"; ANSWER =>  \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 11 #"NASTY-PATSY"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 11 #"NASTY-PATSY"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 1 #" "
0 0 14 3 11 #"NASTY-PATSY"
0 0 24 3 2 #") "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 8 #"-----End"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Problem"
0 0 19 3 7 #" 7-----"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #"::;::;;;;;::;;;:"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; Problem 8    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; Write a procedure gentle, which takes as input"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; a strategy (say strat) and a number"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; between 0 and 1 (call it gentleness-factor)."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; HINT : You can use (bigfloat->flonum (bfrandom))"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; to generate random numbers between 0 and 1"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gentle"
0 0 24 3 1 #" "
0 0 14 3 5 #"strat"
0 0 24 3 1 #" "
0 0 14 3 17 #"gentleness-factor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-history"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"    ))    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; Test cases for gentle: (When you write your procedure you can"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; test it with the below test cases. Initially it returns #f since"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; your-answer-here is defined as #f. But when you complete the proce"
 #"dure"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; It should return the correct answers below.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 15 #"--------Problem"
0 0 19 3 10 #" 8--------"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 2 #" ("
0 0 19 3 6 #"gentle"
0 0 19 3 1 #" "
0 0 19 3 5 #"NASTY"
0 0 19 3 1 #" "
0 0 19 3 4 #"0.0)"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gentle"
0 0 24 3 1 #" "
0 0 14 3 5 #"NASTY"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.0"
0 0 24 3 3 #")) "
0 0 17 3 14 #"; ANSWER =>  \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gentle"
0 0 24 3 1 #" "
0 0 14 3 5 #"NASTY"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.0"
0 0 24 3 3 #")) "
0 0 17 3 14 #"; ANSWER =>  \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 2 #" ("
0 0 19 3 6 #"gentle"
0 0 19 3 1 #" "
0 0 19 3 5 #"NASTY"
0 0 19 3 1 #" "
0 0 19 3 4 #"1.0)"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gentle"
0 0 24 3 1 #" "
0 0 14 3 5 #"NASTY"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 3 #")) "
0 0 17 3 14 #"; ANSWER =>  \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"testing"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gentle"
0 0 24 3 1 #" "
0 0 14 3 5 #"NASTY"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"SLIGHTLY-GENTLE-NASTY"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gentle"
0 0 24 3 1 #" "
0 0 14 3 5 #"NASTY"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"SLIGHTLY-GENTLE-EYE-FOR-EYE"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gentle"
0 0 24 3 1 #" "
0 0 14 3 11 #"EYE-FOR-EYE"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 8 #"-----End"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Problem"
0 0 19 3 7 #" 8-----"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;; DO NOT CHANGE FOLLOWING LINES, THEY ARE NECESSARY FOR 3 PLAYER G"
 #"AME."
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #"::;::;;;;;::;;:;"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; Problem 9    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";Revise the Scheme code for the two-player game to make a three-play"
 #"er iterated game."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"play-loop3"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat0"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat1"
0 0 24 3 1 #" "
0 0 14 3 6 #"strat2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"play-loop-iter"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #" "
0 0 14 3 8 #"history2"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"play-loop-iter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 1 #" "
0 0 14 3 17 #"the-empty-history"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Define \""
0 0 17 3 49 #"print-out-results\" for handling three strategies:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"print-out-results3"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #" "
0 0 14 3 8 #"history2"
0 0 24 3 1 #" "
0 0 14 3 15 #"number-of-games"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Define \""
0 0 17 3 42 #"get-scores\" for handling three strategies:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-scores3"
0 0 24 3 1 #" "
0 0 14 3 8 #"history0"
0 0 24 3 1 #" "
0 0 14 3 8 #"history1"
0 0 24 3 1 #" "
0 0 14 3 8 #"history2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Define \""
0 0 17 3 45 #"extract-entry\" for handling three strategies:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 1 #" "
0 0 14 3 4 #"play"
0 0 24 3 1 #" "
0 0 14 3 6 #"*list*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; Test cases for extract-entry3: (When you write your procedure you "
 #"can"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; test it with the below test cases. Initially it returns #f since"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; your-answer-here is defined as #f. But when you complete the proce"
 #"dure"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; It should return the correct answers below.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 15 #"--------Problem"
0 0 19 3 10 #" 9--------"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 17 #" extract-entry-3:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; ANSWER =>  ((\""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 12 #"c\") (4 4 4))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; ANSWER => ((\""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 12 #"d\") (2 2 5))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; ANSWER =>  ((\""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"d"
0 0 17 3 3 #"\" \""
0 0 17 3 12 #"c\") (2 5 2))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; ANSWER =>  ((\""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"d"
0 0 17 3 3 #"\" \""
0 0 17 3 12 #"d\") (0 3 3))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; ANSWER =>  ((\""
0 0 17 3 1 #"d"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 12 #"c\") (5 2 2))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; ANSWER => ((\""
0 0 17 3 1 #"d"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 12 #"d\") (3 0 3))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; ANSWER =>  ((\""
0 0 17 3 1 #"d"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"d"
0 0 17 3 3 #"\" \""
0 0 17 3 12 #"c\") (3 3 0))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; ANSWER => ((\""
0 0 17 3 1 #"d"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"d"
0 0 17 3 3 #"\" \""
0 0 17 3 12 #"d\") (1 1 1))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"extract-entry3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-play"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"x"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"x"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"x"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 24 #"*game-association-list3*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; ANSWER =>  ()    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 8 #"-----End"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Problem"
0 0 19 3 7 #" 9-----"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #"::;::;;;;;::;;::"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Problem 10    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; Write strategies Patsy-3, Nasty-3, and spastic-3 that will work in"
 #" a three-player game."
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #"; Hint: They are same as NASTY, PATSY, and SPASTIC."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"PATSY-3"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-1"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"NASTY-3"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-1"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"SPASTIC-3"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-1"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"TOUGH-EYE-FOR-EYE"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-1"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"SOFT-EYE-FOR-EYE"
0 0 24 3 1 #" "
0 0 14 3 10 #"my-history"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-1"
0 0 24 3 1 #" "
0 0 14 3 15 #"other-history-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 16 #"your-answer-here"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Test cases for strategies: (When you write your procedure you can"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; test it with the below test cases. Initially it returns #f since"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; your-answer-here is defined as #f. But when you complete the proce"
 #"dure"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; It should return the correct answers below.)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 15 #"--------Problem"
0 0 19 3 11 #" 10--------"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 9 #" NASTY-3:"
0 0 19 3 1 #"\""
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"NASTY-3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"NASTY-3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"NASTY-3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 9 #" PATSY-3:"
0 0 19 3 1 #"\""
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"PATSY-3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"PATSY-3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"PATSY-3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 11 #" SPASTIC-3:"
0 0 19 3 1 #"\""
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"SPASTIC-3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 25 #"; ANSWER => 50% of time \""
0 0 17 3 1 #"d"
0 0 17 3 16 #"\", 50% of time \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 19 #" TOUGH-EYE-FOR-EYE:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"TOUGH-EYE-FOR-EYE"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"TOUGH-EYE-FOR-EYE"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"TOUGH-EYE-FOR-EYE"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"TOUGH-EYE-FOR-EYE"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Testing"
0 0 19 3 18 #" SOFT-EYE-FOR-EYE:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"SOFT-EYE-FOR-EYE"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"SOFT-EYE-FOR-EYE"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"SOFT-EYE-FOR-EYE"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"d\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"SOFT-EYE-FOR-EYE"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"d"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 3 #")) "
0 0 17 3 13 #"; ANSWER => \""
0 0 17 3 2 #"c\""
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 8 #"-----End"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 7 #"Problem"
0 0 19 3 1 #" "
0 0 19 3 8 #"10-----\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 5 #")    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;;;;::;::;:::;;;;::::;;::::;;::::::;:;:::;:::;;::;;;:;::;:::;::;:"
 #"::;::;;;;;::;:;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #"; END OF PROJECT    "
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 6 #"      "
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 1 24 65 1 #"\t"
0 0 24 29 1 #"\n"
0           0
